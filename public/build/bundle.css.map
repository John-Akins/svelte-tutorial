{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\Home.svelte",
    "..\\..\\PostForm.svelte"
  ],
  "sourcesContent": [
    "<script> \r\n    import { onMount } from 'svelte';\r\n    import PostForm from '../components/PostForm.svelte';\r\n\r\n    export let apiBaseUrl;\r\n    export let M;\r\n\r\n    const posts = {\r\n        loaded: false,\r\n        items: [],\r\n    };\r\n\r\n    const POST_RESET = {\r\n        id: null,\r\n        title: \"\",\r\n        body: \"\",\r\n    }\r\n\r\n    let editingPost = {\r\n        id: null,\r\n        title: \"\",\r\n        body: \"\",\r\n    };\r\n\r\n    let limit = 6;\r\n\r\n    onMount((async () => {\r\n        M.AutoInit();\r\n        const res = await fetch(`${apiBaseUrl}/posts`);\r\n        posts.items = await res.json();  \r\n        posts.loaded = posts.items.length > 0 ? true : false\r\n    }));\r\n\r\n    const editPost = (post) => {\r\n        editingPost = POST_RESET;\r\n        console.log(\"post\")\r\n        console.log(post)\r\n        console.log(posts)\r\n        editingPost = post;\r\n    }\r\n\r\n    const addPost = async ({ detail: post }) => {\r\n        posts.items = [post, ...posts.items]\r\n    }\r\n\r\n    const updatePost = async({ detail: post }) => {\r\n        const index = posts.items.findIndex(p => p.id === post.id);\r\n        let postsUpdated = posts.items;\r\n        postsUpdated.splice(index, 1, post)\r\n        posts.items = postsUpdated;\r\n    }\r\n\r\n    const deletePost = async (id) => {\r\n        confirm(`Are you sure?`);\r\n        const req = fetch(`${apiBaseUrl}/post/${id}`, {\r\n            method: \"DELETE\",\r\n        });\r\n        const res = await req;\r\n        posts.items = posts.items.filter(p => p.id != id);\r\n    }\r\n\r\n    const setLimit = async () => {\r\n        const res = await fetch(`${apiBaseUrl}/posts/${limit}`);\r\n        posts.items = await res.json();          \r\n    }\r\n\r\n</script>\r\n\r\n<style>\r\n    .card .card-content .card-title {\r\n        margin-bottom: 0;\r\n    }\r\n    .card .card-content p.timestamp {\r\n        margin-bottom: 10px;\r\n        color: #999;\r\n    }\r\n    .card.form-container {\r\n        border: 0px solid #999;\r\n        border-radius: 5px;\r\n        box-shadow: unset !important;\r\n        background: ghostwhite;\r\n        margin-top: 10px;\r\n    }\r\n</style>\r\n\r\n<div class=\"row\">\r\n    <div class=\"col s6\">\r\n        <div class=\"card form-container\">\r\n            <div class=\"card-content\">\r\n                <PostForm on:postCreated={addPost} on:postUpdated={updatePost} {apiBaseUrl} {editingPost} />        \r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"col s6\">\r\n        <div class=\"card form-container\">\r\n            <div class=\"card-content\">\r\n                <h5>Set Content Limit</h5>\r\n                <div>\r\n                    <input type=\"number\" bind:value={limit}/>\r\n                    <button class=\"btn-flat waves-effect white-text teal accent-4 waves-light\" on:click={setLimit}>\r\n                    Set Limit\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"row\">\r\n    {#if posts.loaded === false}\r\n        <div class=\"\">\r\n            Loading posts...\r\n        </div>\r\n    {:else}\r\n        {#each posts.items as post}\r\n            <div class=\"col s6\">\r\n                <div class=\"card\">\r\n                    <div class=\"card-content\">\r\n                        <p class=\"card-title\">\r\n                            {post.title}\r\n                        </p>\r\n                        <p class=\"timestamp\">{post.createdAt}</p>\r\n                        <p>{post.body}</p>\r\n                    </div>\r\n                    <div class=\"card-action\">\r\n                        <a href=\"#post-form\" class=\"btn-flat waves-effect  waves-grey\" on:click = {() => editPost(post)}>Edit</a>\r\n                        <span class=\"red-text waves-effect btn-flat waves-red\" on:click = {() => deletePost(post.id)}>Delete</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        {/each}    \r\n    {/if}\r\n</div>\r\n",
    "<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    \r\n    const dispatch = createEventDispatcher();\r\n\r\n    export let apiBaseUrl;\r\n    export let editingPost; \r\n\r\n    const POST_RESET = {\r\n        id: null,\r\n        title: \"\",\r\n        body: \"\",\r\n    }\r\n\r\n    let loading = false;\r\n\r\n    let title, body;\r\n\r\n    let url, method;\r\n    let newPost = {};\r\n\r\n    $: title = editingPost.title;\r\n    $: body = editingPost.body;\r\n    \r\n    $: newPost = editingPost.id ? editingPost : {\r\n        title, body\r\n    }\r\n\r\n    $: formLabelClass = {\r\n        title: (title === \"\") ? \"\" : \"active\",\r\n        body: (body === \"\") ? \"\" : \"active\",       \r\n    }\r\n\r\n    const clearForm = async () => {\r\n        editingPost = POST_RESET;\r\n        return\r\n    }\r\n\r\n    const postRequest = async () => {\r\n        if (editingPost.id) {\r\n            url = `${apiBaseUrl}/post/${editingPost.id}`;\r\n            method = \"PUT\";\r\n            newPost = editingPost\r\n        } else {\r\n            url = `${apiBaseUrl}/post`;\r\n            method = \"POST\";        \r\n            newPost = { title, body }\r\n        }   \r\n\r\n        const req = await fetch(url , {\r\n            method, \r\n            body: JSON.stringify(newPost)\r\n        });\r\n        const res = await req.json();\r\n\r\n        (method === \"PUT\") ? dispatch('postUpdated', res) : dispatch('postCreated', res);\r\n\r\n        return;\r\n    }\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        if(title.trim() === '' && body.trim() === '') {\r\n            return;\r\n        }\r\n\r\n        loading = true;\r\n        await postRequest();\r\n        loading = false;\r\n        await clearForm();\r\n    }\r\n\r\n</script>\r\n\r\n<style>\r\n    form {\r\n        margin: 50px;\r\n    }\r\n</style>\r\n\r\n{#if !loading}\r\n<form on:submit={onSubmit} id=\"post-form\">\r\n    <div class=\"input-field\">\r\n        <label for=\"title\"  class={formLabelClass.title}>Title</label>\r\n        <input type=\"text\" name=\"title\" bind:value={editingPost.title}>\r\n    </div>\r\n    <div class=\"input-field\">\r\n        <label for=\"title\" class={formLabelClass.body}>Body</label>\r\n        <textarea id=\"textarea1\" class=\"materialize-textarea\" bind:value={editingPost.body}></textarea>\r\n    </div>\r\n    <button class=\"btn-flat waves-effect white-text grey lighen-5 waves-light\">\r\n        {editingPost.id ? 'Update' : 'Add'}\r\n    </button>\r\n    <span class=\"btn-flat waves-effect white-text red accent-1 waves-light\" on:click={clearForm}>Cancel</span>\r\n</form>\r\n{:else if loading === true}\r\n    <div>Sending...</div>\r\n{/if}\r\n"
  ],
  "names": [],
  "mappings": "AAqEI,mBAAK,CAAC,aAAa,CAAC,WAAW,cAAC,CAAC,AAC7B,aAAa,CAAE,CAAC,AACpB,CAAC,AACD,mBAAK,CAAC,aAAa,CAAC,CAAC,UAAU,cAAC,CAAC,AAC7B,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,IAAI,AACf,CAAC,AACD,KAAK,eAAe,4BAAC,CAAC,AAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,KAAK,CAAC,UAAU,CAC5B,UAAU,CAAE,UAAU,CACtB,UAAU,CAAE,IAAI,AACpB,CAAC;ACND,IAAI,eAAC,CAAC,AACF,MAAM,CAAE,IAAI,AAChB,CAAC"
}